@Library('jenkins-pipeline-library@main') _

pipeline {
  agent {
    node {
      label 'openstack-slave-pangyo'
      customWorkspace "workspace/${env.JOB_NAME}/${env.BUILD_NUMBER}"
    }
  }
  parameters {
    string(name: 'KUBERNETES_CLUSTER_IP',
      defaultValue: '',
      description: 'Exising k8s cluster\'s endpoint. The cluster can be connected with jenkins.key in taco production env.')
  }
  options {
    timeout(time: 60, unit: 'MINUTES')
    timestamps()
  }

  stages {
    stage('Init') {
      steps {
        script {
          endpoint = params.KUBERNETES_CLUSTER_IP

          if(!endpoint) {
            error("Kubernetes Cluster IP was not specified! The value is mandatory!")
          }

          println("============================")
          println("cluster endpoint: ${endpoint}")
          println("============================")
        }
      }
    }

    stage('Test connection using ingress URL') {
      steps {
        script {
          sh """
            cp /opt/jenkins/.ssh/jenkins-slave-hanukey ./jenkins.key

            # Send nginx-resource.yml #
            scp -o StrictHostKeyChecking=no -i jenkins.key -r validate-service-mesh/nginx-resource.yaml taco@${endpoint}:/home/taco/

            # Apply the manifest #
            ssh -o StrictHostKeyChecking=no -i jenkins.key taco@${endpoint} "kubectl create ns nginx && kubectl apply -f /home/taco/nginx-resource.yaml"
          """

          println("*** Retrieving ingressGateway NodePort ***")
          ingressNodePort = sh(returnStdout: true,
            script: "ssh -o StrictHostKeyChecking=no -i jenkins.key taco@${endpoint} 'kubectl get svc -n istio-gateway -o=jsonpath=\'{.items[0].spec.ports[?(@.port==80)].nodePort}\'").trim()

          if(!ingressNodePort) {
            throw new Exception("Failed to retrieve ingressGateway's nodePort.")
          } else {
            println("Retrieved ingressGateway's nodePort: ${ingressNodePort}")
          }

          // TODO: remove this line once this job is confirmed to be working.
          sh "curl -s -I -HHost:nginx.hanu.com http://${endpoint}:${ingressNodePort}"

          // Test connection using ingress url
          connStatus = sh(returnStatus: true,
            script: "curl -s -I -HHost:nginx.hanu.com http://${endpoint}:${ingressNodePort} | grep '200 OK'")
          if (!connStatus) {
            println("Successfully connected to nginx service!")
          } else {
            error("Failed to connect to nginx service. )
          }
        }
      }
    }
  }
}
