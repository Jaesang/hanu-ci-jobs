@Library('jenkins-pipeline-library@main') _

def getUpstreamSonobuoyVersion() {
  version = sh(returnStdout: true,
    script: "git ls-remote --tags ${env.SONOBUOY_URL} | awk '{print \$2}' | grep \"v[0-9.]*\$\" | sed \"s/refs\\/tags\\/v//g\" | sort -t. -k1,1n -k2,2n -k3,3n | tail -1").trim()
  return version
}

pipeline {
  agent {
    node {
      label 'openstack-slave'
    }
  }
  environment {
    SONOBUOY_URL = "https://github.com/vmware-tanzu/sonobuoy.git"
  }
  parameters {
    string(name: 'SONOBUOY_VERSION',
      defaultValue: 'latest',
      description: 'version of sonobuoy. eg) 0.19.0')
    string(name: 'SONOBUOY_MODE',
      defaultValue: 'quick',
      description: 'non-disruptive-conformance | quick | certified-conformance')
    string(name: 'KUBERNETES_CLUSTER_IP',
      defaultValue: '',
      description: 'set exising cluster\'s endpoint. the cluster can be connected with jenkins.key in taco production env. If blank, new aio kubernetes will be deployed to diagnose.')
    booleanParam(name: 'CLEANUP',
      defaultValue: true,
      description: 'Clean up workspace after job execution')
  }
  options {
    timeout(time: 120, unit: 'MINUTES')
    timestamps()
  }

  stages {
    stage('Init') {
      steps {
        script {
          version = (params.SONOBUOY_VERSION == "latest") ? getUpstreamSonobuoyVersion() : params.SONOBUOY_VERSION
          endpoint = params.KUBERNETES_CLUSTER_IP

          println("============================")
          println("sonobuoy version: ${version}")
          println("cluster endpoint: ${ip}")
          println("============================")
        }
      }
    }

    stage('Run Sonobuoy') {
      steps {
        script {
          sh """
            #rm -rf /var/lib/jenkins/.ssh/known_hosts
            cp /opt/jenkins/.ssh/jenkins-slave-hanukey ./jenkins.key

            ssh -o StrictHostKeyChecking=no -i jenkins.key taco@${endpoint} "curl -L \"https://github.com/vmware-tanzu/sonobuoy/releases/download/v${version}/sonobuoy_${version}_linux_amd64.tar.gz\" --output ./sonobuoy.tar.gz && tar -xzf ./sonobuoy.tar.gz && chmod +x ./sonobuoy && sudo cp sonobuoy /usr/bin/ && rm -rf ./sonobuoy*"
            ssh -o StrictHostKeyChecking=no -i jenkins.key taco@${endpoint} "sonobuoy run --mode ${params.SONOBUOY_MODE} --e2e-parallel 30 --wait"
            ssh -o StrictHostKeyChecking=no -i jenkins.key taco@${endpoint} "sonobuoy results \$(sonobuoy retrieve)"
            #ssh -o StrictHostKeyChecking=no -i jenkins.key taco@${endpoint} "cat ./results/plugins/e2e/results/global/e2e.log"
          """
          result = sh(returnStdout: true,
            script: "ssh -o StrictHostKeyChecking=no -i jenkins.key taco@${endpoint} 'sonobuoy status'").trim()
          if(result.contains("failed")) {
            throw new Exception("sonobuoy e2e test is failed")
          }
        }
      }
    }
  }

  post {
    always {
      script {
        if ( params.CLEANUP == true ) {
          sh """
            ssh -o StrictHostKeyChecking=no -i jenkins.key taco@${endpoint} "sonobuoy delete --all --wait"
          """
        } else {
          echo "Skipping sonobuoy cleanup.."
        }
      }
    }
  }
}
