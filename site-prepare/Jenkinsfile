@Library('jenkins-pipeline-library@main') _

pipeline {
  agent {
    node {
      label 'site-prepare'
      customWorkspace "workspace/${env.JOB_NAME}/${env.BUILD_NUMBER}"
    }
  }
  parameters {
    string(name: 'TACOPLAY_VERSION',
      defaultValue: 'main',
      description: 'branch or tag of tacoplay (Eg, \'main\' or \'2.0.0\'')
    string(name: 'TARGET_SITE',
      defaultValue: 'gate-centos-lb-ceph-online-multinodes',
      description: 'target site (inventory) name for manifest preparation')
    string(name: 'INCLUDED_APPS',
      defaultValue: 'openstack,lma',
      description: 'Apps to include in tarball? (comma-separated list)')
    string(name: 'OPENSTACK_RELEASE',
      defaultValue: 'stein',
      description: 'openstack_release for manifest selection (Eg, \'queens\' or \'stein\'')
  }
  environment {
    KUBECONFIG = "/root/.kube/config"
    ANSIBLE_INVALID_TASK_ATTRIBUTE_FAILED = "False"
  }
  options {
    timeout(time: 120, unit: 'MINUTES')
    timestamps()
  }

  stages {
    stage ('Run') {
      steps {
        container('common') {
          checkout([$class: 'GitSCM',
                branches: [[name: '*/main' ]],
                extensions: scm.extensions,
                userRemoteConfigs: [[
                    url: 'git@github.com:openinfradev/taco-gate-inventories.git',
                    credentialsId: 'jenkins-to-github-key'
                ]]
            ])
          script {
            sh """
              cp /root/.netrc ~/.netrc
              yum install -y git iproute net-tools
              git clone https://github.com/openinfradev/tacoplay.git
              cp -r inventories/${params.TARGET_SITE} tacoplay/inventory/
              mkdir ~/agent/docker_images || true

            """
            dir('tacoplay') {
              sh "git checkout ${params.TACOPLAY_VERSION}"

              // Should pass this format: '{"taco_apps": ['openstack','lma']}'
              tacoplay_params = "-e '{\"taco_apps\": ["
              add_openstack_param = false

              if (params.INCLUDED_APPS) {
                def app_list = params.INCLUDED_APPS.split(',')

                app_list.eachWithIndex { app, index ->
                  if ( app == 'openstack') {
                    if (! params.TARGET_SITE.startsWith('gate')) {
                      add_openstack_param = true
                    }
                  } 

                  if ( index == app_list.length-1 ) {
                    tacoplay_params += "'${app}'"
                  } else {
                   tacoplay_params += "'${app}',"
                  }
                }
              }
              tacoplay_params += "]}'"

              if (add_openstack_param) {
                tacoplay_params += " -e 'site_name=${params.TARGET_SITE} openstack_release=${params.OPENSTACK_RELEASE}'"
              }

              println("tacoplay_params: ${tacoplay_params}")
              repo = sh (
                script: "cat /etc/hosts|grep tacorepo",
                returnStatus: true
              ) 
              if ( repo == 1 ) {
                sh (script: "echo 127.0.0.1 tacorepo|tee -a /etc/hosts")
              }

              sh """
                env | grep PATH
                ./fetch-sub-projects.sh
                python --version
                yum install -y epel-release
                yum install -y python-pip
                pip install --upgrade pip
                pip install -r requirements.txt

                ansible-playbook -vvv -u root -b -i inventory/preparation/local.ini extra-playbooks/site-prepare.yml --tags download,upload,preinstall,untagged --skip-tags upgrade -e @inventory/preparation/extra-vars.yml -e site_name=${params.TARGET_SITE} ${tacoplay_params}
              """
            }
          }
        }
      }
    }

    stage ('Push artifact') {
      steps {
        container('common') {
          script {
            sh """
              mv tacoplay.tar.gz tacoplay-${params.TARGET_SITE}-${params.TACOPLAY_VERSION}-\$(date +%y%m%d).tar.gz
              mc --quiet -C /root/.mc cp tacoplay-${params.TARGET_SITE}-${params.TACOPLAY_VERSION}-\$(date +%y%m%d).tar.gz ${env.MINIO}/artifacts/

              echo "tacoplay-${params.TARGET_SITE}-${params.TACOPLAY_VERSION}-\$(date +%y%m%d).tar.gz" > latest-${params.TARGET_SITE}
              mc --quiet -C /root/.mc cp latest-${params.TARGET_SITE} ${env.MINIO}/artifacts/
            """
          }
        }
      }
    }

  }

  post {
    success {
      notifyCompleted(true)
    }
    failure {
      notifyCompleted(false)
    }
  }
}
